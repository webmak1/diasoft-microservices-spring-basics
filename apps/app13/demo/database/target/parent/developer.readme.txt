Набор правил и требований, обязательный к соблюдению каждым разработчиком,
меняющим структуру базы данных.

0. Перед выполнением каких либо манипуляций с БД, изучить инструмент Liquibase (http://liquibase.org/) 

1. В настоящий момент с помощью DatabaseManager'a можно удалить, создать, проинициализировать 
и обновить БД MS SQL Server или Oracle. 
Убедитесь перед комитом, что их работоспособность не нарушилась Вашими правками.

2. Кодировка всех файлов проекта - UTF-8.  При несоблюдении этого правила
русский текст будет занесен в базу данных некорректно.

3. В папке src/main/resources/releases лежат скрипты для создания зафиксированных версий.
Что-либо править там категорически запрещено.

4. Любые изменения в структуре БД необходимо заносить в файл 
src/main/resources/updates/<current-version>/<current-vversion>.xml (подробнее см.ниже)
Больше эти правки нигде дублировать не надо.
  

5. Изменять update файлы и скрипты для уже выпущенных версий категорически запрещено.
Если клиент запустит обновление с таким измененным файлов система выдаст ему ошибку и 
ничего обновлять не будет (или обновит только наполовину, не понятно до какого состояния).
Если какой то скрипт уже был воплнен клиентов на своей БД, менять его нельзя.  

6. Каждая таблица должна быть снабжена исчерпывающим комментарием (см. существующие таблицы)

7. После символов многострочного комментария "/*" обязательно должен стоять пробел (например, "/* комментарий */").
Если этого не сделать, то / будет рассматриваться как команда SQL*Plus и это приведет к ошибкам выполнения.
  
8. Внутри операторов SQL, занимающих несколько строк (например - создание таблицы), следует избегать пустых строк,
	например:
		CREATE TABLE CORE_TASKSTATE (
			STATESYSNAME 	VARCHAR(255) NOT NULL,		
			STATENAME	VARCHAR(255) NOT NULL,		
			DESCRIPTION	VARCHAR(255)	
								<- вот ЭТО приведет к ошибке
		); 

9. Были замечены глюки системы, если комментарий заканчивает SQL файл. 
Чтобы этого избежать, в конце SQL файла всегда должен быть SQL запрос. 

10. Все операторы SQL должны заканчиваться символом ";". Его отсутствие может привести к тому, 
что оператор выполнен не будет и выполнение скрипта под Oracle перейдет в интерактивный режим.

11. После символа окончания оператора SQL (";") остаток строки должен быть пустым, 
т.е. не допускаются никакие другие операторы SQL и комментарии.

12. Если необходимо добавить блоки кода PL/SQL (т.е. DECLARE... BEGIN... END) 
или создание хранимых процедур, функций или объектных типов, 
то рекомендуется использовать отдельные теги <changeSet> для каждой БД
(<changeSet ... dbms="dbtype">). Внутри этих тегов рекомендуется использовать 
<createProcedure> или <sql> или <sqlFile> (помним про кодировку).
			

	Пошаговая инструкция "Как внести изменения в структуру БД"
	
1. Если не существует, создать папку src/main/resources/updates/<version> и в ней файл <version>.xml. 
<version> - это ближайшая по плану версия, которую будут выпускать.
Из версии надо удалить символы скобок, чтобы не было проблем.
Ссылку на файл надо вставить в src/main/resources/updateChangeLog.xml в виде:
<include file="updates/<version>/<version>.xml" relativeToChangelogFile="false"/> 
Вставлять надо перед комментарием "<!--  DO NOT MODIFY BELOW THIS LINE -->"


2. В конец файла <version>.xml из п.1 дописать свои теги <changeSet> :

<changeSet author="<your_login>" id="<version>-<feature>[-<dbtype>]">

<!-- Идентификатор changeSet'a должен быть уникальным. 
     Поэтому необходимо следовать следующей схеме выбора идентификатора: <version>-<feature>[-<dbtype>]
     <version> - это ближайшая по плану версия, которую будут выпускать
     <feature> - идентификатор функционала, над которым Вы работаете, должен быть коротким 1-2 слова, можно использовать номер бага в Jire
     <dbtype> - если используется нативный SQL, под каждую СУБД надо создавать отдельный changeSet c аттрибутом dbms, 
                идентификаторы у них все равно должны быть уникальные, поэтому тип СУБД надо добавлять в идентификатор.
                Если нативный SQL не используется, тип СУБД лучше не указывать. 
 -->       

	<preConditions onFail="MARK_RAN">
		<!-- проверка предварительных условий для выполнения обновления.
			например, если создаете таблицу, проверьте, что она не существует. -->
			
		<!-- использовать CONTINUE вместо MARK_RUN, нельзя потому что тогда БД всегда будет считаться устаревшей.			
			В некоторых случаях onFail="MARK_RUN" можно убрать, но надо понимать, 
			что тогда при невыполнении условия обновление БД развалится с ошибкой.
			(это можно делать если precondition выявляет в БД проблему не совместимую с жизнью - тогда развалится с ошибкой будет уместно)
		 -->
	</preConditions>

	<!-- Здесь теги модификации БД (документация http://liquibase.org/manual/home) -->

	<!-- Настоятельно рекомендуется использовать теги Liquibase (например, <createTable>, <addColumn>, <createIndex> и т.п.), 
		вместо нативного SQL, потому что теги будут работать для всех поддерживаемых СУБД, 
		а нативный SQL только для одной конкретной и надо будет под каждую СУБД писать свой SQL
	  -->

	<!-- примеры -->
	
	<createTable tableName="person">
    	<column name="id" type="int">
        	<constraints primaryKey="true" nullable="false"/>
    	</column>
    	<column name="firstname" type="varchar(255)"/>
    	<column name="lastname" type="varchar(255)"/>
    	<column name="username" type="varchar(255)">
      		<constraints unique="true" nullable="false"/>
    	</column>
     	<column name="testid" type="int" />
	</createTable>


	<sql>
		<!-- SQL который нельзя выразить тегами Liquibase-->
	</sql>

	<sqlFile path="updates/<version>/<version>-<feature>-<dbtype>.sql" encoding="UTF-8" />

</changeSet>   
	

3. Проверить работоспособность своих правок путем сборки модуля DatabaseManager
Модули есть тесты которые создают БД "с нуля", делают обновления и проверки версии БД.
Команда: 
	mvn clean install
	
4. Закомитить свои правки   

